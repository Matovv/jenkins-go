pipeline {
    /*
    agent { 
        
        node {
            label 'docker-agent-python'
        }
    }
    */
    pipeline {
    agent any
    triggers {
        pollSCM '* * * * *'
    }
    tools {
        // Specify the Go installation by name
        go 'Go'
    }
    stages {
        stage('Lint') {
            steps {
                script {
                    echo "Linting code..."
                    // Replace 'golint' with the actual linter command you use
                    def lintExitCode = sh(script: 'staticcheck ./...', returnStatus: true)
                    if (lintExitCode != 0) {
                        error('Linting failed!')
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    // Use catchError to catch errors during 'go test'
                    catchError(buildResult: 'FAILURE', message: 'Unit tests failed!') {
                        echo "Testing.."
                        sh 'go test ./...' || error('Tests failed!')
                    }
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    // Use catchError to catch errors during 'go test'
                    catchError(buildResult: 'FAILURE', message: 'Build failed!') {
                        echo "Building.."
                        sh 'go build -o myapp .' || error('Build failed!')
                    }
                }
            }
        }
        stage('Deliver') {
            steps {
                echo 'Deliver....'
                sh '''
                echo "doing delivery stuff.."
                '''
            }
        }
    }
}